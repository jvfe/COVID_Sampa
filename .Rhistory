install.packages(c("httr", "jsonlite"))
library(httr)
library(jsonlite)
>> res = GET("https://brasil.io/api/dataset/covid19/caso_full/data/?search=&date=&state=&city=S%C3%A3o+Paulo&place_type=&is_last=&city_ibge_code=&order_for_place=")
res = GET("https://brasil.io/api/dataset/covid19/caso_full/data/?search=&date=&state=&city=S%C3%A3o+Paulo&place_type=&is_last=&city_ibge_code=&order_for_place=")
res
data = fromJSON(rawToChar(res$content))
library(dplyr)
dados_sp = data["results"]
dados_sp = data[["results"]]
dados_sp_selecionada = dados_sp %>% select(c("date", "last_available_confirmed", "last_available_deaths", "order_for_place")
dados_sp_selecionada = dados_sp %>% select(c("date", "last_available_confirmed", "last_available_deaths", "order_for_place"))
dados_sp_selecionada = dados_sp %>% select(c("date", "last_available_confirmed", "last_available_deaths", "order_for_place"))
colnames(dados_sp_selecionada) = c("Data", "Confirmações de casos", "Confirmações de óbitos", "Dia de contagem")
library(tidyr)
dados_sp_selecionada_long = pivot_longer(dados_sp_selecionada, cols = c("Confirmações de casos", "Confirmações de óbitos") )
dados_sp_selecionada_long = pivot_longer(dados_sp_selecionada,
cols = c("Confirmações de casos", "Confirmações de óbitos"),
names_to = "Tipo",
values_to = "Contagem")
dados_sp_selecionada_long
ultima_data = dados_sp_selecionada_long["Data"][1]
ultima_data = dados_sp_selecionada_long[["Data"]][1]
x_label = 'Contagem' + "( Até " + ultima_data + ")"
p1 = ggplot(dados_sp_selecionada_long)         # defining what data to use
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
res = GET("https://brasil.io/api/dataset/covid19/caso_full/data/?search=&date=&state=&city=S%C3%A3o+Paulo&place_type=&is_last=&city_ibge_code=&order_for_place=")
res
data = fromJSON(rawToChar(res$content))
dados_sp = data[["results"]]
dados_sp_selecionada = dados_sp %>% select(c("date", "last_available_confirmed", "last_available_deaths", "order_for_place"))
colnames(dados_sp_selecionada) = c("Data", "Confirmações de casos", "Confirmações de óbitos", "Dia de contagem")
dados_sp_selecionada_long = pivot_longer(dados_sp_selecionada,
cols = c("Confirmações de casos", "Confirmações de óbitos"),
names_to = "Tipo",
values_to = "Contagem")
ultima_data = dados_sp_selecionada_long[["Data"]][1]
library(ggplot2)
library(plotly)
x_label = paste0('Contagem', "( Até ", ultima_data, ")")
p1 = ggplot(dados_sp_selecionada_long)         # defining what data to use
+ aes(x="Dia de contagem",
y = 'Contagem',
color = "Tipo")    # defining what variable to use
+ geom_point(size=2) # defining the type of plot to use
+ ggtitle ("Confirmações cumulativas de COVID-19 na cidade de São Paulo")
+ xlab(x_label)
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
res = GET("https://brasil.io/api/dataset/covid19/caso_full/data/?search=&date=&state=&city=S%C3%A3o+Paulo&place_type=&is_last=&city_ibge_code=&order_for_place=")
res
data = fromJSON(rawToChar(res$content))
dados_sp = data[["results"]]
dados_sp_selecionada = dados_sp %>% select(c("date", "last_available_confirmed", "last_available_deaths", "order_for_place"))
colnames(dados_sp_selecionada) = c("Data", "Confirmações de casos", "Confirmações de óbitos", "Dia de contagem")
dados_sp_selecionada_long = pivot_longer(dados_sp_selecionada,
cols = c("Confirmações de casos", "Confirmações de óbitos"),
names_to = "Tipo",
values_to = "Contagem")
ultima_data = dados_sp_selecionada_long[["Data"]][1]
library(ggplot2)
library(plotly)
x_label = paste0('Contagem', " (Até ", ultima_data, ")")
p1 = ggplot(dados_sp_selecionada_long)         # defining what data to use
+ aes(x=`Dia de contagem`,
y = Contagem,
color = Tipo)    # defining what variable to use
+ geom_point(size=2) # defining the type of plot to use
+ ggtitle ("Confirmações cumulativas de COVID-19 na cidade de São Paulo")
+ xlab(x_label)
p1 = ggplot(dados_sp_selecionada_long, aes(x=`Dia de contagem`,    y = Contagem,      color = Tipo))    # defining what variable to use
+ geom_point(size=2) # defining the type of plot to use
+ ggtitle ("Confirmações cumulativas de COVID-19 na cidade de São Paulo")
+ xlab(x_label)
p1 = ggplot(dados_sp_selecionada_long, aes(x=`Dia de contagem`,    y = Contagem,      color = Tipo))    +
geom_point(size=2) +
ggtitle ("Confirmações cumulativas de COVID-19 na cidade de São Paulo")+
xlab(x_label)
p1
ggplotly(p1)
ggplotly(p1)
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
res = GET("https://brasil.io/api/dataset/covid19/caso_full/data/?search=&date=&state=&city=S%C3%A3o+Paulo&place_type=&is_last=&city_ibge_code=&order_for_place=")
res
data = fromJSON(rawToChar(res$content))
dados_sp = data[["results"]]
dados_sp_selecionada = dados_sp %>% select(c("date", "last_available_confirmed", "last_available_deaths", "order_for_place"))
colnames(dados_sp_selecionada) = c("Data", "Confirmações de casos", "Confirmações de óbitos", "Dia de contagem")
dados_sp_selecionada_long = pivot_longer(dados_sp_selecionada,
cols = c("Confirmações de casos", "Confirmações de óbitos"),
names_to = "Tipo",
values_to = "Contagem")
ultima_data = dados_sp_selecionada_long[["Data"]][1]
library(ggplot2)
library(plotly)
x_label = paste0('Contagem', " (até ", ultima_data, ")")
p1 = ggplot(dados_sp_selecionada_long, aes(x=`Dia de contagem`,    y = Contagem,      color = Tipo))    +
geom_point(size=2) +
ggtitle ("Confirmações cumulativas de COVID-19 na cidade de São Paulo")+
xlab(x_label)
+ labs(caption = "Fonte: Dados consolidados por Brasil IO a partir dos boletins da prefeitura ")
ggplotly(p1)
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
res = GET("https://brasil.io/api/dataset/covid19/caso_full/data/?search=&date=&state=&city=S%C3%A3o+Paulo&place_type=&is_last=&city_ibge_code=&order_for_place=")
res
data = fromJSON(rawToChar(res$content))
dados_sp = data[["results"]]
dados_sp_selecionada = dados_sp %>% select(c("date", "last_available_confirmed", "last_available_deaths", "order_for_place"))
colnames(dados_sp_selecionada) = c("Data", "Confirmações de casos", "Confirmações de óbitos", "Dia de contagem")
dados_sp_selecionada_long = pivot_longer(dados_sp_selecionada,
cols = c("Confirmações de casos", "Confirmações de óbitos"),
names_to = "Tipo",
values_to = "Contagem")
ultima_data = dados_sp_selecionada_long[["Data"]][1]
library(ggplot2)
library(plotly)
x_label = paste0('Contagem', " (até ", ultima_data, ")")
p1 = ggplot(dados_sp_selecionada_long, aes(x=`Dia de contagem`,    y = Contagem,      color = Tipo))    +
geom_point(size=2) +
ggtitle ("Confirmações cumulativas de COVID-19 na cidade de São Paulo")+
xlab(x_label)+
labs(caption = "Fonte: Dados consolidados por Brasil IO a partir dos boletins da prefeitura ")
ggplotly(p1)
lag(dados_sp_selecionada[,"Confirmações de casos"])
lead(dados_sp_selecionada[,"Confirmações de casos"])
diff(lead(dados_sp_selecionada[,"Confirmações de casos"]))
diff(lag(dados_sp_selecionada[,"Confirmações de casos"]))
diff(dados_sp_selecionada[,"Confirmações de casos"])
p1
ggplotly(p1)
# Calculate the likelihood ratio ----
# Set total trials
total_trials<- 100
# Set successes
successes<- 64
# Specify one hypothesis you want to compare with the likihood ratio
theta_H0 <-  .5
# Specify another hypothesis you want to compare with the likihood ratio (you can use 1/20, or 0.05).
# Or you can use the maximum likelihood estimate (considering absence of priors)
maximum_likelihood_estimate = successes/total_trials
theta_H1 <- maximum_likelihood_estimate
binomial_H0 <- dbinom(successes, total_trials, theta_H0)
binomial_H1 <- dbinom(successes, total_trials, theta_H1)
# Returns the likelihood ratio of H0 over H1
binomial_H0/binomial_H1
# Returns the likelihood ratio of H1 over H0
binomial_H1/binomial_H0
# Create 100 theta variables, from 0 to 1
# Theta is the probability of obtating a success
theta<- seq(0,1,len=100)
likelihood <- dbinom(successes,total_trials,theta)
#png(file="LikRatio.png",width=4000,height=3000, , units = "px", res = 900)
plot(theta,likelihood,type='l',xlab=expression(theta), ylab='Likelihood', lwd=2)
points(theta_H0, binomial_H0)
points(theta_H1, binomial_H1)
segments(theta_H0, binomial_H0,successes/total_trials, binomial_H0, lty=2, lwd=2)
segments(theta_H1, binomial_H1,successes/total_trials, binomial_H1, lty=2, lwd=2)
segments(successes/total_trials, binomial_H0,successes/total_trials, binomial_H1, lwd=2)
title(paste('Likelihood Ratio H0/H1:',round(binomial_H0/binomial_H1,digits=2)," Likelihood Ratio H1/H0:",round(binomial_H1/binomial_H0,digits=2)))
#dev.off()
#© Daniel Lakens, 2016.
# Modified and re-released in CC-BY-NC-SA by Tiago Lubiana, 2016
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
# Calculate the likelihood ratio ----
# Set total trials
total_trials<- 280
# Set successes
successes<- 143
# Specify one hypothesis you want to compare with the likihood ratio
theta_H0 <-  .52
# Specify another hypothesis you want to compare with the likihood ratio (you can use 1/20, or 0.05).
# Or you can use the maximum likelihood estimate (considering absence of priors)
maximum_likelihood_estimate = successes/total_trials
theta_H1 <- maximum_likelihood_estimate
binomial_H0 <- dbinom(successes, total_trials, theta_H0)
binomial_H1 <- dbinom(successes, total_trials, theta_H1)
# Returns the likelihood ratio of H0 over H1
binomial_H0/binomial_H1
# Returns the likelihood ratio of H1 over H0
binomial_H1/binomial_H0
# Create 100 theta variables, from 0 to 1
# Theta is the probability of obtating a success
theta<- seq(0,1,len=100)
likelihood <- dbinom(successes,total_trials,theta)
#png(file="LikRatio.png",width=4000,height=3000, , units = "px", res = 900)
plot(theta,likelihood,type='l',xlab=expression(theta), ylab='Likelihood', lwd=2)
points(theta_H0, binomial_H0)
points(theta_H1, binomial_H1)
segments(theta_H0, binomial_H0,successes/total_trials, binomial_H0, lty=2, lwd=2)
segments(theta_H1, binomial_H1,successes/total_trials, binomial_H1, lty=2, lwd=2)
segments(successes/total_trials, binomial_H0,successes/total_trials, binomial_H1, lwd=2)
title(paste('Likelihood Ratio H0/H1:',round(binomial_H0/binomial_H1,digits=2)," Likelihood Ratio H1/H0:",round(binomial_H1/binomial_H0,digits=2)))
#dev.off()
#© Daniel Lakens, 2016.
# Modified and re-released in CC-BY-NC-SA by Tiago Lubiana, 2016
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
# Calculate the likelihood ratio ----
# Set total trials
total_trials<- 280
# Set successes
successes<- 143
# Specify one hypothesis you want to compare with the likihood ratio
theta_H0 <-  .52
# Specify another hypothesis you want to compare with the likihood ratio (you can use 1/20, or 0.05).
# Or you can use the maximum likelihood estimate (considering absence of priors)
maximum_likelihood_estimate = successes/total_trials
theta_H1 <- .5
binomial_H0 <- dbinom(successes, total_trials, theta_H0)
binomial_H1 <- dbinom(successes, total_trials, theta_H1)
# Returns the likelihood ratio of H0 over H1
binomial_H0/binomial_H1
# Returns the likelihood ratio of H1 over H0
binomial_H1/binomial_H0
# Create 100 theta variables, from 0 to 1
# Theta is the probability of obtating a success
theta<- seq(0,1,len=100)
likelihood <- dbinom(successes,total_trials,theta)
#png(file="LikRatio.png",width=4000,height=3000, , units = "px", res = 900)
plot(theta,likelihood,type='l',xlab=expression(theta), ylab='Likelihood', lwd=2)
points(theta_H0, binomial_H0)
points(theta_H1, binomial_H1)
segments(theta_H0, binomial_H0,successes/total_trials, binomial_H0, lty=2, lwd=2)
segments(theta_H1, binomial_H1,successes/total_trials, binomial_H1, lty=2, lwd=2)
segments(successes/total_trials, binomial_H0,successes/total_trials, binomial_H1, lwd=2)
title(paste('Likelihood Ratio H0/H1:',round(binomial_H0/binomial_H1,digits=2)," Likelihood Ratio H1/H0:",round(binomial_H1/binomial_H0,digits=2)))
#dev.off()
#© Daniel Lakens, 2016.
# Modified and re-released in CC-BY-NC-SA by Tiago Lubiana, 2016
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
#Set the point null hypothesis you want to calculate the Bayes Factor for
theta_H0 <-0.5
# Set total trials
total_trials <-50
#set successes
successes <-20
#Set the alpha for the Beta distribution for the prior
a_prior<-2
#Set the beta for the Beta distribution for the prior
bprior<-2
a_likelihood<-successes+1 #Calculate the alpha for the Beta distribution for the likelihood
b_likelihood<-total_trials-successes+1 #Calculate the beta for the Beta distribution for the likelihood
a_posterior<-a_prior+a_likelihood-1 #Calculate the alpha for the Beta distribution for the posterior
b_posterior<-bprior+b_likelihood-1 #Calculate the beta for the Beta distribution for the posterior
#create theta range from 0 to 1
theta<-seq(0,1,0.001)
#png(file="PriorLikelihoodPosterior.png",width=3000,height=3000, res = 500)
prior <- dbeta(theta, a_prior, bprior)
likelihood <- dbeta(theta, a_likelihood, b_likelihood)
posterior <- dbeta(theta, a_posterior, b_posterior)
plot(theta, posterior, ylim=c(0, 15), type = "l", lwd = 3, xlab = bquote(theta), ylab = "Density", las = 1)
lines(theta, prior, col="grey", lwd = 3)
lines(theta, likelihood, lty = 2, lwd = 3, col="dodgerblue")
points(theta_H0,dbeta(theta_H0, a_posterior, b_posterior), pch = 19)
points(theta_H0,dbeta(theta_H0, a_prior, bprior), pch = 19, col="grey")
segments(theta_H0, dbeta(theta_H0, a_posterior, b_posterior), theta_H0, dbeta(theta_H0, a_prior, bprior), lty=2)
BF10<-dbeta(theta_H0, a_posterior, b_posterior)/dbeta(theta_H0, a_prior, bprior)
title(paste('Bayes Factor:',round(BF10,digits=2)))
#dev.off()
#Š Daniel Lakens, 2016.
# Modified by Tiago Lubiana, 2020
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
n<-10 #set total trials
x<-0 #set successes
aprior<-10 #Set the alpha for the Beta distribution for the prior
bprior<-10 #Set the beta for the Beta distribution for the prior
ymax<-10 #set max y-axis
alikelihood<-x+1 #Calculate the alpha for the Beta distribution for the likelihood
blikelihood<-n-x+1 #Calculate the beta for the Beta distribution for the likelihood
aposterior<-aprior+alikelihood-1 #Calculate the alpha for the Beta distribution for the posterior
bposterior<-bprior+blikelihood-1 #Calculate the beta for the Beta distribution for the posterior
theta<-seq(0,1,0.001) #create theta range from 0 to 1
#png(file="BinomialPosteriorMean.png",width=4000,height=4000, res = 500)
prior <- dbeta(theta, aprior, bprior) #deterine prior distribution
likelihood <- dbeta(theta, alikelihood, blikelihood) #determine likelihood distribution
posterior <- dbeta(theta, aposterior, bposterior) #determine posterior distribution
plot(theta, posterior, ylim=c(0, ymax), type = "l", lwd = 3, xlab = bquote(theta), ylab = "Density", las = 1) #draw posterior distribution
lines(theta, prior, col="grey", lwd = 3) #draw prior distribution
lines(theta, likelihood, lty = 2, lwd = 3, col="dodgerblue") #draw likelihood distribution
LL<-qbeta(.025,aposterior, bposterior) #calculate lower limit credible interval
UL<-qbeta(.975,aposterior, bposterior) #calculate upper limit credible interval
abline(v = aposterior/(aposterior+bposterior)) #draw line mean
abline(v = LL, col="grey",lty=3) #draw line lower limit
abline(v = UL, col="grey",lty=3) #draw line upper limit
polygon(c(theta[theta<LL],rev(theta[theta<LL])),c(posterior[theta<LL], rep(0,sum(theta<LL))),col="lightgrey",border=NA)
polygon(c(theta[theta>UL],rev(theta[theta>UL])),c(posterior[theta>UL], rep(0,sum(theta>UL))),col="lightgrey",border=NA)
title(paste('Mean posterior:',round((aposterior/(aposterior+bposterior)),digits=5),", 95% Credible Interval:",round(LL,digits=2),";",round(UL,digits=2)))
#dev.off()
if(!require(binom)){install.packages('binom')}
library(binom)
binom.bayes(x, n, type = "central", prior.shape1 = aprior, prior.shape2 = bprior)
binom.bayes(x, n, type = "highest", prior.shape1 = aprior, prior.shape2 = bprior)
#Š Daniel Lakens, 2016.
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
diff(dados_sp_selecionada[,"Confirmações de casos"])
lag(dados_sp_selecionada[,"Confirmações de casos"])
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
res = GET("https://brasil.io/api/dataset/covid19/caso_full/data/?search=&date=&state=&city=S%C3%A3o+Paulo&place_type=&is_last=&city_ibge_code=&order_for_place=")
res
data = fromJSON(rawToChar(res$content))
dados_sp = data[["results"]]
dados_sp_selecionada = dados_sp %>% select(c("date", "last_available_confirmed", "last_available_deaths", "order_for_place"))
colnames(dados_sp_selecionada) = c("Data", "Confirmações de casos", "Confirmações de óbitos", "Dia de contagem")
dados_sp_selecionada_long = pivot_longer(dados_sp_selecionada,
cols = c("Confirmações de casos", "Confirmações de óbitos"),
names_to = "Tipo",
values_to = "Contagem")
ultima_data = dados_sp_selecionada_long[["Data"]][1]
library(ggplot2)
library(plotly)
x_label = paste0('Contagem', " (até ", ultima_data, ")")
p1 = ggplot(dados_sp_selecionada_long, aes(x=`Dia de contagem`,    y = Contagem,      color = Tipo))    +
geom_point(size=2) +
ggtitle ("Confirmações cumulativas de COVID-19 na cidade de São Paulo")+
xlab(x_label)+
labs(caption = "Fonte: Dados consolidados por Brasil IO a partir dos boletins da prefeitura ")
ggplotly(p1)
lag(dados_sp_selecionada[,"Confirmações de casos"])
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
res = GET("https://brasil.io/api/dataset/covid19/caso_full/data/?search=&date=&state=&city=S%C3%A3o+Paulo&place_type=&is_last=&city_ibge_code=&order_for_place=")
res
data = fromJSON(rawToChar(res$content))
dados_sp = data[["results"]]
dados_sp_selecionada = dados_sp %>% select(c("date", "last_available_confirmed", "last_available_deaths", "order_for_place"))
colnames(dados_sp_selecionada) = c("Data", "Confirmações de casos", "Confirmações de óbitos", "Dia de contagem")
dados_sp_selecionada_long = pivot_longer(dados_sp_selecionada,
cols = c("Confirmações de casos", "Confirmações de óbitos"),
names_to = "Tipo",
values_to = "Contagem")
ultima_data = dados_sp_selecionada_long[["Data"]][1]
library(ggplot2)
library(plotly)
x_label = paste0('Contagem', " (até ", ultima_data, ")")
p1 = ggplot(dados_sp_selecionada_long, aes(x=`Dia de contagem`,    y = Contagem,      color = Tipo))    +
geom_point(size=2) +
ggtitle ("Confirmações cumulativas de COVID-19 na cidade de São Paulo")+
xlab(x_label)+
labs(caption = "Fonte: Dados consolidados por Brasil IO a partir dos boletins da prefeitura ")
ggplotly(p1)
lead(dados_sp_selecionada[,"Confirmações de casos"])
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
res = GET("https://brasil.io/api/dataset/covid19/caso_full/data/?search=&date=&state=&city=S%C3%A3o+Paulo&place_type=&is_last=&city_ibge_code=&order_for_place=")
res
data = fromJSON(rawToChar(res$content))
dados_sp = data[["results"]]
dados_sp_selecionada = dados_sp %>% select(c("date", "last_available_confirmed", "last_available_deaths", "order_for_place"))
colnames(dados_sp_selecionada) = c("Data", "Confirmações de casos", "Confirmações de óbitos", "Dia de contagem")
dados_sp_selecionada_long = pivot_longer(dados_sp_selecionada,
cols = c("Confirmações de casos", "Confirmações de óbitos"),
names_to = "Tipo",
values_to = "Contagem")
ultima_data = dados_sp_selecionada_long[["Data"]][1]
library(ggplot2)
library(plotly)
x_label = paste0('Contagem', " (até ", ultima_data, ")")
p1 = ggplot(dados_sp_selecionada_long, aes(x=`Dia de contagem`,    y = Contagem,      color = Tipo))    +
geom_point(size=2) +
ggtitle ("Confirmações cumulativas de COVID-19 na cidade de São Paulo")+
xlab(x_label)+
labs(caption = "Fonte: Dados consolidados por Brasil IO a partir dos boletins da prefeitura ")
ggplotly(p1)
dados_sp_selecionada[,"Confirmações de casos"]
diff(dados_sp_selecionada[,"Confirmações de casos"])
-(diff(dados_sp_selecionada[,"Confirmações de casos"]))
dados_sp_selecionada["Casos por dia"] <- -(diff(dados_sp_selecionada[,"Confirmações de casos"]))
dados_sp_selecionada["Casos por dia"] <- -(diff(dados_sp_selecionada[,"Confirmações de casos"]))[-121]
-(diff(dados_sp_selecionada[,"Confirmações de casos"]))[-121]
-(diff(dados_sp_selecionada[,"Confirmações de casos"]))[-1]
-(diff(dados_sp_selecionada[,"Confirmações de casos"]))[-21]
c(-(diff(dados_sp_selecionada[,"Confirmações de casos"])),0)
dados_sp_selecionada["Casos por dia"] <- c(-(diff(dados_sp_selecionada[,"Confirmações de casos"])),0)
dados_sp_selecionada["Óbitos por dia"] <- c(-(diff(dados_sp_selecionada[,"Confirmações de óbitos"])),0)
dados_sp_selecionada_long = pivot_longer(dados_sp_selecionada,
cols = c("Confirmações de casos", "Confirmações de óbitos", "Casos por dia", "Óbitos por dia"),
names_to = "Tipo",
values_to = "Contagem")
ultima_data = dados_sp_selecionada_long[["Data"]][1]
x_label = paste0('Contagem', " (até ", ultima_data, ")")
p1 = ggplot(dados_sp_selecionada_long, aes(x=`Dia de contagem`,    y = Contagem,      color = Tipo))    +
geom_point(size=2) +
ggtitle ("Casos confirmados de COVID-19 na cidade de São Paulo")+
xlab(x_label)+
labs(caption = "Fonte: Dados consolidados por Brasil IO a partir dos boletins da prefeitura ")
p1
so_casos <- dados_sp_selecionada_long %>% filter(`Tipo` %in% c("Confirmações de óbitos", "Casos por dia"))
p1 = ggplot(so_casos, aes(x=`Dia de contagem`,    y = Contagem,      color = Tipo))    +
geom_point(size=2) +
ggtitle ("Casos confirmados de COVID-19 na cidade de São Paulo")+
xlab(x_label)+
labs(caption = "Fonte: Dados consolidados por Brasil IO a partir dos boletins da prefeitura ")
p1
p1 = ggplot(so_casos, aes(x=`Dia de contagem`,    y = Contagem,      color = Tipo))    +
geom_line(size=2) +
ggtitle ("Casos confirmados de COVID-19 na cidade de São Paulo")+
xlab(x_label)+
labs(caption = "Fonte: Dados consolidados por Brasil IO a partir dos boletins da prefeitura ")
p1
so_casos <- dados_sp_selecionada_long %>% filter(`Tipo` %in% c("Confirmações de casos", "Casos por dia"))
p1 = ggplot(so_casos, aes(x=`Dia de contagem`,    y = Contagem,      color = Tipo))    +
geom_line(size=2) +
ggtitle ("Casos confirmados de COVID-19 na cidade de São Paulo")+
xlab(x_label)+
labs(caption = "Fonte: Dados consolidados por Brasil IO a partir dos boletins da prefeitura ")
p1
so_obitos <- dados_sp_selecionada_long %>% filter(`Tipo` %in% c("Confirmações de óbitos", "Óbitos por dia"))
p2 = ggplot(so_casos, aes(x=`Dia de contagem`,    y = Contagem,      color = Tipo))    +
geom_line(size=2) +
ggtitle ("Óbitos confirmados de COVID-19 na cidade de São Paulo")+
xlab(x_label)+
labs(caption = "Fonte: Dados consolidados por Brasil IO a partir dos boletins da prefeitura ")
p2
p2 = ggplot(so_obitos, aes(x=`Dia de contagem`,    y = Contagem,      color = Tipo))    +
geom_line(size=2) +
ggtitle ("Óbitos confirmados de COVID-19 na cidade de São Paulo")+
xlab(x_label)+
labs(caption = "Fonte: Dados consolidados por Brasil IO a partir dos boletins da prefeitura ")
p2
so_casos_diarios <- dados_sp_selecionada_long %>% filter(`Tipo` %in% c("Casos por dia"))
p3 = ggplot(so_casos_diarios, aes(x=`Dia de contagem`,    y = Contagem,      color = Tipo))    +
geom_line(size=2) +
ggtitle ("Casos confirmados de COVID-19 na cidade de São Paulo")+
xlab(x_label)+
labs(caption = "Fonte: Dados consolidados por Brasil IO a partir dos boletins da prefeitura ")
p3
so_obitoss_diarios <- dados_sp_selecionada_long %>% filter(`Tipo` %in% c("Óbitos por dia"))
p4 = ggplot(so_casos_diarios, aes(x=`Dia de contagem`,    y = Contagem,      color = Tipo))    +
geom_line(size=2) +
ggtitle ("Óbitos confirmados de COVID-19 na cidade de São Paulo")+
xlab(x_label)+
labs(caption = "Fonte: Dados consolidados por Brasil IO a partir dos boletins da prefeitura ")
p4
so_obitos_diarios <- dados_sp_selecionada_long %>% filter(`Tipo` %in% c("Óbitos por dia"))
p4 = ggplot(so_obitos_diarios, aes(x=`Dia de contagem`,    y = Contagem,      color = Tipo))    +
geom_line(size=2) +
ggtitle ("Óbitos confirmados de COVID-19 na cidade de São Paulo")+
xlab(x_label)+
labs(caption = "Fonte: Dados consolidados por Brasil IO a partir dos boletins da prefeitura ")
p4
ggsave(p1)
ggsave(p1, filename = "casos.png", device = "png")
ggsave(p3, filename = "casos_por_dia.png", device = "png")
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
res = GET("https://brasil.io/api/dataset/covid19/caso_full/data/?search=&date=&state=&city=S%C3%A3o+Paulo&place_type=&is_last=&city_ibge_code=&order_for_place=")
res
data = fromJSON(rawToChar(res$content))
dados_sp = data[["results"]]
dados_sp_selecionada = dados_sp %>% select(c("date", "last_available_confirmed", "last_available_deaths", "order_for_place"))
colnames(dados_sp_selecionada) = c("Data", "Confirmações de casos", "Confirmações de óbitos", "Dia de contagem")
library(ggplot2)
library(plotly)
dados_sp_selecionada["Casos por dia"] <- c(-(diff(dados_sp_selecionada[,"Confirmações de casos"])),0)
dados_sp_selecionada["Óbitos por dia"] <- c(-(diff(dados_sp_selecionada[,"Confirmações de óbitos"])),0)
dados_sp_selecionada_long = pivot_longer(dados_sp_selecionada,
cols = c("Confirmações de casos", "Confirmações de óbitos", "Casos por dia", "Óbitos por dia"),
names_to = "Tipo",
values_to = "Contagem")
ultima_data = dados_sp_selecionada_long[["Data"]][1]
x_label = paste0('Contagem', " (até ", ultima_data, ")")
so_casos <- dados_sp_selecionada_long %>% filter(`Tipo` %in% c("Confirmações de casos", "Casos por dia"))
p1 = ggplot(so_casos, aes(x=`Dia de contagem`,    y = Contagem,      color = Tipo))    +
geom_line(size=2) +
ggtitle ("Casos confirmados de COVID-19 na cidade de São Paulo")+
xlab(x_label)+
labs(caption = "Fonte: Dados consolidados por Brasil IO a partir dos boletins da prefeitura ")
ggsave(p1, filename = "casos.png", device = "png")
so_casos_diarios <- dados_sp_selecionada_long %>% filter(`Tipo` %in% c("Casos por dia"))
p3 = ggplot(so_casos_diarios, aes(x=`Dia de contagem`,    y = Contagem,      color = Tipo))    +
geom_line(size=2) +
ggtitle ("Casos confirmados de COVID-19 na cidade de São Paulo")+
xlab(x_label)+
labs(caption = "Fonte: Dados consolidados por Brasil IO a partir dos boletins da prefeitura ")
ggsave(p3, filename = "casos_por_dia.png", device = "png")
so_obitos <- dados_sp_selecionada_long %>% filter(`Tipo` %in% c("Confirmações de óbitos", "Óbitos por dia"))
p2 = ggplot(so_obitos, aes(x=`Dia de contagem`,    y = Contagem,      color = Tipo))    +
geom_line(size=2) +
ggtitle ("Óbitos confirmados de COVID-19 na cidade de São Paulo")+
xlab(x_label)+
labs(caption = "Fonte: Dados consolidados por Brasil IO a partir dos boletins da prefeitura ")
ggsave(p2, filename = "obitos_por_dia.png", device = "png")
so_obitos_diarios <- dados_sp_selecionada_long %>% filter(`Tipo` %in% c("Óbitos por dia"))
p4 = ggplot(so_obitos_diarios, aes(x=`Dia de contagem`,    y = Contagem,      color = Tipo))    +
geom_line(size=2) +
ggtitle ("Óbitos confirmados de COVID-19 na cidade de São Paulo")+
xlab(x_label)+
labs(caption = "Fonte: Dados consolidados por Brasil IO a partir dos boletins da prefeitura ")
ggsave(p4, filename = "obitos_por_dia.png", device = "png")
